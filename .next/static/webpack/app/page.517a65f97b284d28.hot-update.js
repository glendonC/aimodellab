"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/model/nvidia-optimizer.ts":
/*!***************************************!*\
  !*** ./lib/model/nvidia-optimizer.ts ***!
  \***************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NvidiaOptimizer: function() { return /* binding */ NvidiaOptimizer; }\n/* harmony export */ });\n// nvidia-optimizer.ts\nclass NvidiaOptimizer {\n    async optimizeModel(modelId, currentMetrics) {\n        const modelType = this.detectModelType(modelId);\n        const config = this.generateOptimizationConfig(modelType);\n        // Store original metrics\n        const originalMetrics = {\n            ...currentMetrics\n        };\n        // Apply TensorRT optimizations\n        const optimizedMetrics1 = await this.applyTensorRTOptimizations(modelType, currentMetrics, config);\n        // Calculate performance improvements\n        const improvements = this.calculateImprovements(originalMetrics, optimizedMetrics1);\n        const result = {\n            modelType,\n            originalMetrics,\n            optimizedMetrics: optimizedMetrics1,\n            optimizations: {\n                tensorRT: {\n                    enabled: true,\n                    precisionMode: config.precision,\n                    layerFusion: config.layerFusion,\n                    dynamicBatching: config.dynamicBatching\n                },\n                rapids: {\n                    enabled: this.shouldUseRapids(modelType),\n                    dataflowOptimized: true,\n                    memoryPooling: true\n                },\n                performance: improvements\n            }\n        };\n        // Store optimization result\n        this.optimizationState.set(modelId, result);\n        return result;\n    }\n    detectModelType(modelId) {\n        const id = modelId.toLowerCase();\n        if (id.includes(\"resnet\")) return \"CNN\";\n        if (id.includes(\"yolo\")) return \"DETECTION\";\n        if (id.includes(\"stable\")) return \"DIFFUSION\";\n        if (id.includes(\"llama\") || id.includes(\"gpt\")) return \"LLM\";\n        if (id.includes(\"vit\")) return \"VISION_TRANSFORMER\";\n        return \"CNN\"; // Default\n    }\n    generateOptimizationConfig(modelType) {\n        switch(modelType){\n            case \"DETECTION\":\n                return {\n                    precision: \"FP16\",\n                    batchSize: 16,\n                    workspace: 4,\n                    layerFusion: true,\n                    dynamicBatching: true\n                };\n            case \"DIFFUSION\":\n                return {\n                    precision: \"FP16\",\n                    batchSize: 1,\n                    workspace: 8,\n                    layerFusion: true,\n                    dynamicBatching: false\n                };\n            case \"LLM\":\n                return {\n                    precision: \"INT8\",\n                    batchSize: 1,\n                    workspace: 16,\n                    layerFusion: true,\n                    dynamicBatching: false\n                };\n            default:\n                return {\n                    precision: \"FP16\",\n                    batchSize: 32,\n                    workspace: 4,\n                    layerFusion: true,\n                    dynamicBatching: true\n                };\n        }\n    }\n    async applyTensorRTOptimizations(modelType, metrics, config) {\n        const optimizations = {\n            DETECTION: {\n                speedupFactor: 2.8,\n                memoryReduction: 20,\n                latencyImprovement: 65\n            },\n            DIFFUSION: {\n                speedupFactor: 2.2,\n                memoryReduction: 15,\n                latencyImprovement: 55\n            },\n            LLM: {\n                speedupFactor: 1.8,\n                memoryReduction: 10,\n                latencyImprovement: 45\n            },\n            DEFAULT: {\n                speedupFactor: 2.4,\n                memoryReduction: 25,\n                latencyImprovement: 60\n            }\n        };\n        const improvements = optimizations[modelType] || optimizations.DEFAULT;\n        // Apply TensorRT-specific optimizations\n        if (config.layerFusion) {\n            optimizedMetrics.latency *= 0.85;\n        }\n        if (config.dynamicBatching) {\n            optimizedMetrics.inferenceSpeed *= 1.2;\n        }\n        const result = {\n            ...improvements,\n            tensorRTMode: config.precision,\n            layerFusion: config.layerFusion,\n            rapidsAcceleration: this.shouldUseRapids(modelType)\n        };\n        return result;\n    }\n    shouldUseRapids(modelType) {\n        return [\n            \"DETECTION\",\n            \"DIFFUSION\"\n        ].includes(modelType);\n    }\n    calculateImprovements(original, optimized) {\n        return {\n            speedupFactor: optimized.inferenceSpeed / original.inferenceSpeed,\n            memoryReduction: 1 - optimized.memoryUsage / original.memoryUsage,\n            latencyImprovement: 1 - optimized.latency / original.latency\n        };\n    }\n    getOptimizationState(modelId) {\n        return this.optimizationState.get(modelId) || null;\n    }\n    clearOptimizationState(modelId) {\n        this.optimizationState.delete(modelId);\n    }\n    constructor(){\n        this.optimizationState = new Map();\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/model/nvidia-optimizer.ts\n"));

/***/ })

});