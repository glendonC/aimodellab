"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/huggingface.ts":
/*!****************************!*\
  !*** ./lib/huggingface.ts ***!
  \****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FEATURED_MODELS: function() { return /* binding */ FEATURED_MODELS; },\n/* harmony export */   getModelArchitecture: function() { return /* binding */ getModelArchitecture; },\n/* harmony export */   getModelInfo: function() { return /* binding */ getModelInfo; },\n/* harmony export */   searchModels: function() { return /* binding */ searchModels; }\n/* harmony export */ });\nconst FEATURED_MODELS = [\n    // Vision Models (GPU-Intensive)\n    {\n        id: \"microsoft/resnet-50\",\n        name: \"ResNet-50\",\n        description: \"State-of-the-art image classification model with CUDA optimization\",\n        type: \"vision\",\n        task: \"image-classification\",\n        architecture: \"ResNet\",\n        size: \"98 MB\",\n        downloads: 2500000,\n        likes: 1200,\n        tags: [\n            \"computer-vision\",\n            \"classification\",\n            \"cuda-optimized\"\n        ]\n    },\n    {\n        id: \"nvidia/stable-diffusion-v1.5\",\n        name: \"Stable Diffusion v1.5\",\n        description: \"Optimized for NVIDIA GPUs with tensor core acceleration\",\n        type: \"vision\",\n        task: \"text-to-image\",\n        architecture: \"Diffusion\",\n        size: \"7.7 GB\",\n        downloads: 5800000,\n        likes: 3200,\n        tags: [\n            \"generative-ai\",\n            \"text-to-image\",\n            \"tensor-cores\"\n        ]\n    },\n    {\n        id: \"yolov8\",\n        name: \"YOLOv8\",\n        description: \"Real-time object detection with CUDA acceleration\",\n        type: \"vision\",\n        task: \"object-detection\",\n        architecture: \"YOLO\",\n        size: \"108 MB\",\n        downloads: 4200000,\n        likes: 2800,\n        tags: [\n            \"object-detection\",\n            \"real-time\",\n            \"tensorrt\"\n        ]\n    },\n    // Large Language Models\n    {\n        id: \"meta-llama/llama-2-7b\",\n        name: \"Llama 2 (7B)\",\n        description: \"Efficient large language model with multi-GPU scaling\",\n        type: \"text\",\n        task: \"text-generation\",\n        architecture: \"Transformer\",\n        size: \"13.5 GB\",\n        downloads: 8500000,\n        likes: 4500,\n        tags: [\n            \"llm\",\n            \"multi-gpu\",\n            \"fp16-optimized\"\n        ]\n    },\n    {\n        id: \"openai/gpt-2\",\n        name: \"GPT-2 Small\",\n        description: \"Compact language model with GPU acceleration\",\n        type: \"text\",\n        task: \"text-generation\",\n        architecture: \"Transformer\",\n        size: \"1.5 GB\",\n        downloads: 3800000,\n        likes: 2100,\n        tags: [\n            \"nlp\",\n            \"text-generation\",\n            \"cuda\"\n        ]\n    },\n    // Specialized Models\n    {\n        id: \"facebook/bart-large-cnn\",\n        name: \"BART Large CNN\",\n        description: \"GPU-accelerated text summarization model\",\n        type: \"text\",\n        task: \"summarization\",\n        architecture: \"Transformer\",\n        size: \"1.6 GB\",\n        downloads: 1800000,\n        likes: 950,\n        tags: [\n            \"nlp\",\n            \"summarization\",\n            \"cuda\"\n        ]\n    },\n    {\n        id: \"openai/whisper-base\",\n        name: \"Whisper Base\",\n        description: \"Speech recognition optimized for NVIDIA GPUs\",\n        type: \"audio\",\n        task: \"speech-recognition\",\n        architecture: \"Transformer\",\n        size: \"442 MB\",\n        downloads: 2900000,\n        likes: 1600,\n        tags: [\n            \"speech\",\n            \"audio\",\n            \"cuda-optimized\"\n        ]\n    },\n    {\n        id: \"google/vit-base-patch16-224\",\n        name: \"ViT Base\",\n        description: \"Vision Transformer with tensor core acceleration\",\n        type: \"vision\",\n        task: \"image-classification\",\n        architecture: \"Transformer\",\n        size: \"346 MB\",\n        downloads: 3200000,\n        likes: 1500,\n        tags: [\n            \"vision\",\n            \"transformers\",\n            \"tensor-cores\"\n        ]\n    },\n    {\n        id: \"dmis-lab/biobert-base\",\n        name: \"BioBERT\",\n        description: \"Biomedical language model with GPU optimization\",\n        type: \"text\",\n        task: \"text-classification\",\n        architecture: \"BERT\",\n        size: \"412 MB\",\n        downloads: 890000,\n        likes: 720,\n        tags: [\n            \"healthcare\",\n            \"nlp\",\n            \"cuda\"\n        ]\n    },\n    {\n        id: \"facebook/dinov2-base\",\n        name: \"DINOv2\",\n        description: \"Self-supervised vision model with NVIDIA acceleration\",\n        type: \"vision\",\n        task: \"self-supervised-learning\",\n        architecture: \"Transformer\",\n        size: \"384 MB\",\n        downloads: 1200000,\n        likes: 890,\n        tags: [\n            \"self-supervised\",\n            \"vision\",\n            \"cuda\"\n        ]\n    }\n];\nasync function searchModels(query) {\n    try {\n        const response = await fetch(\"https://huggingface.co/api/models?search=\".concat(encodeURIComponent(query)), {\n            headers: {\n                \"Accept\": \"application/json\"\n            }\n        });\n        if (!response.ok) {\n            throw new Error(\"HTTP error! status: \".concat(response.status));\n        }\n        const text = await response.text();\n        if (!text) {\n            return [];\n        }\n        let data;\n        try {\n            data = JSON.parse(text);\n        } catch (e) {\n            console.error(\"Failed to parse response:\", e);\n            return [];\n        }\n        if (!Array.isArray(data)) {\n            console.error(\"Unexpected response format:\", data);\n            return [];\n        }\n        return data.map((model)=>{\n            var _this, _model_config_architectures, _model_config, _model_downloads_binary, _model_downloads, _model_downloads1;\n            return {\n                id: model.modelId || model.id,\n                name: ((_this = model.modelId || model.id) === null || _this === void 0 ? void 0 : _this.split(\"/\").pop()) || \"Unknown Model\",\n                description: model.description || \"No description available\",\n                type: determineModelType(model.pipeline_tag),\n                task: model.pipeline_tag || \"unknown\",\n                architecture: ((_model_config = model.config) === null || _model_config === void 0 ? void 0 : (_model_config_architectures = _model_config.architectures) === null || _model_config_architectures === void 0 ? void 0 : _model_config_architectures[0]) || \"unknown\",\n                size: formatSize(((_model_downloads = model.downloads) === null || _model_downloads === void 0 ? void 0 : (_model_downloads_binary = _model_downloads.binary) === null || _model_downloads_binary === void 0 ? void 0 : _model_downloads_binary.size) || 0),\n                downloads: ((_model_downloads1 = model.downloads) === null || _model_downloads1 === void 0 ? void 0 : _model_downloads1.total) || 0,\n                likes: model.likes || 0,\n                tags: [\n                    model.pipeline_tag,\n                    ...model.tags || [],\n                    model.library_name\n                ].filter(Boolean)\n            };\n        });\n    } catch (error) {\n        console.error(\"Failed to search models:\", error);\n        return [];\n    }\n}\nfunction determineModelType(pipelineTag) {\n    if (!pipelineTag) return \"vision\";\n    const visionTasks = [\n        \"image-classification\",\n        \"object-detection\",\n        \"image-segmentation\"\n    ];\n    const textTasks = [\n        \"text-classification\",\n        \"text-generation\",\n        \"translation\"\n    ];\n    const audioTasks = [\n        \"audio-classification\",\n        \"speech-recognition\"\n    ];\n    if (visionTasks.includes(pipelineTag)) return \"vision\";\n    if (textTasks.includes(pipelineTag)) return \"text\";\n    if (audioTasks.includes(pipelineTag)) return \"audio\";\n    return \"multimodal\";\n}\nfunction formatSize(bytes) {\n    if (bytes === 0) return \"0 B\";\n    const k = 1024;\n    const sizes = [\n        \"B\",\n        \"KB\",\n        \"MB\",\n        \"GB\",\n        \"TB\"\n    ];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + \" \" + sizes[i];\n}\nasync function getModelInfo(modelId) {\n    try {\n        var _this, _model_config_architectures, _model_config, _model_downloads_binary, _model_downloads, _model_downloads1;\n        const response = await fetch(\"https://huggingface.co/api/models/\".concat(modelId), {\n            headers: {\n                \"Accept\": \"application/json\"\n            }\n        });\n        if (!response.ok) {\n            throw new Error(\"Model not found\");\n        }\n        const model = await response.json();\n        return {\n            id: model.modelId || model.id,\n            name: ((_this = model.modelId || model.id) === null || _this === void 0 ? void 0 : _this.split(\"/\").pop()) || \"Unknown Model\",\n            description: model.description || \"No description available\",\n            type: determineModelType(model.pipeline_tag),\n            task: model.pipeline_tag || \"unknown\",\n            architecture: ((_model_config = model.config) === null || _model_config === void 0 ? void 0 : (_model_config_architectures = _model_config.architectures) === null || _model_config_architectures === void 0 ? void 0 : _model_config_architectures[0]) || \"unknown\",\n            size: formatSize(((_model_downloads = model.downloads) === null || _model_downloads === void 0 ? void 0 : (_model_downloads_binary = _model_downloads.binary) === null || _model_downloads_binary === void 0 ? void 0 : _model_downloads_binary.size) || 0),\n            downloads: ((_model_downloads1 = model.downloads) === null || _model_downloads1 === void 0 ? void 0 : _model_downloads1.total) || 0,\n            likes: model.likes || 0,\n            tags: [\n                model.pipeline_tag,\n                ...model.tags || [],\n                model.library_name\n            ].filter(Boolean)\n        };\n    } catch (error) {\n        console.error(\"Failed to get model info:\", error);\n        throw error;\n    }\n}\nasync function getModelArchitecture(modelId) {\n    switch(modelId){\n        case \"microsoft/resnet-50\":\n            return generateResNetArchitecture();\n        case \"facebook/bart-large-cnn\":\n            return generateTransformerArchitecture();\n        case \"google/vit-base-patch16-224\":\n            return generateViTArchitecture();\n        case \"nvidia/stable-diffusion-v1.5\":\n            return generateStableDiffusionArchitecture();\n        case \"meta-llama/llama-2-7b\":\n            return generateLlama2Architecture();\n        case \"yolov8\":\n            return generateYOLOv8Architecture();\n        // Add more cases as we implement them\n        default:\n            return generateDefaultArchitecture();\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/huggingface.ts\n"));

/***/ })

});