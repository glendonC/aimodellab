"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/model/simulator.ts":
/*!********************************!*\
  !*** ./lib/model/simulator.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ModelSimulator: function() { return /* binding */ ModelSimulator; }\n/* harmony export */ });\nclass ModelSimulator {\n    async runSimulation(nodes) {\n        var _nodes_;\n        const layerResults = [];\n        const warnings = [];\n        let currentShape = ((_nodes_ = nodes[0]) === null || _nodes_ === void 0 ? void 0 : _nodes_.inputShapes[0]) || [\n            1,\n            224,\n            224,\n            3\n        ];\n        const details = []; // Added to store simulation details\n        details.push(\"Initializing model simulation...\");\n        details.push(\"Analyzing \".concat(nodes.length, \" layers for performance characteristics\"));\n        // Simulate forward pass\n        for(let i = 0; i < nodes.length; i++){\n            const node = nodes[i];\n            const nextNode = nodes[i + 1];\n            details.push(\"Simulating layer \".concat(node.id, \": \").concat(node.name));\n            const result = this.simulateLayer(node, currentShape, details);\n            layerResults.push(result);\n            currentShape = result.outputShape;\n            // Check for incompatibilities\n            if (nextNode && !this.areShapesCompatible(result.outputShape, nextNode)) {\n                warnings.push({\n                    layerId: nextNode.id,\n                    type: \"shape_mismatch\",\n                    message: \"Shape mismatch between \".concat(node.name, \" and \").concat(nextNode.name),\n                    suggestion: this.generateShapeMismatchSuggestion(result.outputShape, nextNode)\n                });\n            }\n        }\n        // Generate performance metrics\n        const performance = this.calculatePerformanceMetrics(layerResults);\n        // Generate optimization tips\n        const optimizationTips = this.generateOptimizationTips(nodes, layerResults);\n        // Placeholder for metrics -  Needs further definition based on the animation requirements.\n        const metrics = [\n            {\n                name: \"Total FLOPS\",\n                value: performance.totalFlops\n            },\n            {\n                name: \"Total Memory\",\n                value: performance.totalMemory\n            }\n        ];\n        return {\n            layerResults,\n            performance,\n            warnings,\n            optimizationTips,\n            metrics,\n            details\n        };\n    }\n    simulateLayer(node, inputShape, details) {\n        // Simulate layer computation and shape transformation\n        details.push(\"  Input shape: \".concat(inputShape));\n        const outputShape = this.calculateOutputShape(node, inputShape);\n        const flops = this.calculateLayerFlops(node, inputShape);\n        const memoryUsage = this.calculateMemoryUsage(node, inputShape, outputShape);\n        const inferenceTime = this.estimateInferenceTime(flops);\n        details.push(\"  Output shape: \".concat(outputShape));\n        details.push(\"  FLOPS: \".concat(flops));\n        details.push(\"  Memory Usage: \".concat(memoryUsage));\n        details.push(\"  Inference Time: \".concat(inferenceTime));\n        return {\n            layerId: node.id,\n            inputShape,\n            outputShape,\n            memoryUsage,\n            flops,\n            inferenceTime,\n            isBottleneck: flops > 1000000 || memoryUsage > 1000000\n        };\n    }\n    calculateOutputShape(node, inputShape) {\n        switch(node.type){\n            case \"cnn\":\n                var _node_attributes;\n                return [\n                    inputShape[0],\n                    inputShape[1] - 2,\n                    inputShape[2] - 2,\n                    ((_node_attributes = node.attributes) === null || _node_attributes === void 0 ? void 0 : _node_attributes.filters) || 32\n                ];\n            case \"pooling\":\n                return [\n                    inputShape[0],\n                    Math.floor(inputShape[1] / 2),\n                    Math.floor(inputShape[2] / 2),\n                    inputShape[3]\n                ];\n            case \"flatten\":\n                return [\n                    inputShape[0],\n                    inputShape.slice(1).reduce((a, b)=>a * b, 1)\n                ];\n            case \"mlp\":\n                var _node_attributes1;\n                return [\n                    inputShape[0],\n                    ((_node_attributes1 = node.attributes) === null || _node_attributes1 === void 0 ? void 0 : _node_attributes1.units) || 128\n                ];\n            default:\n                return inputShape;\n        }\n    }\n    calculateLayerFlops(node, inputShape) {\n        // Simplified FLOP calculations\n        switch(node.type){\n            case \"cnn\":\n                var _node_attributes, _node_attributes1;\n                const filters = ((_node_attributes = node.attributes) === null || _node_attributes === void 0 ? void 0 : _node_attributes.filters) || 32;\n                const kernelSize = ((_node_attributes1 = node.attributes) === null || _node_attributes1 === void 0 ? void 0 : _node_attributes1.kernelSize) || 3;\n                return inputShape[1] * inputShape[2] * inputShape[3] * filters * kernelSize * kernelSize;\n            case \"mlp\":\n                var _node_attributes2;\n                const units = ((_node_attributes2 = node.attributes) === null || _node_attributes2 === void 0 ? void 0 : _node_attributes2.units) || 128;\n                return inputShape[1] * units;\n            default:\n                return 1000; // Base cost\n        }\n    }\n    calculateMemoryUsage(node, inputShape, outputShape) {\n        // Calculate memory in bytes (simplified)\n        const inputSize = inputShape.reduce((a, b)=>a * b, 1) * 4; // 4 bytes per float\n        const outputSize = outputShape.reduce((a, b)=>a * b, 1) * 4;\n        return inputSize + outputSize;\n    }\n    estimateInferenceTime(flops) {\n        // Simplified estimation: assume 1 TFLOP/s GPU\n        return flops / 1000000000;\n    }\n    areShapesCompatible(outputShape, nextNode) {\n        // Check if shapes are compatible between layers\n        if (nextNode.type === \"flatten\") return true;\n        return outputShape.length === nextNode.inputShapes[0].length;\n    }\n    generateShapeMismatchSuggestion(outputShape, node) {\n        return \"Add a reshape layer to convert \".concat(outputShape.join(\"x\"), \" to match \").concat(node.type, \" input requirements\");\n    }\n    calculatePerformanceMetrics(results) {\n        const totalFlops = results.reduce((sum, r)=>sum + r.flops, 0);\n        const totalMemory = results.reduce((sum, r)=>sum + r.memoryUsage, 0);\n        return {\n            totalFlops,\n            totalMemory,\n            estimatedFps: 1000 / Math.max(...results.map((r)=>r.inferenceTime)),\n            gpuUtilization: Math.min(totalFlops / 1000000000 * 100, 100)\n        };\n    }\n    generateOptimizationTips(nodes, results) {\n        const tips = [];\n        // Check for common optimization opportunities\n        if (!nodes.some((n)=>n.type === \"normalization\")) {\n            tips.push({\n                title: \"Add Batch Normalization\",\n                description: \"Consider adding BatchNorm layers after convolutions to improve training stability\",\n                impact: \"high\",\n                category: \"architecture\"\n            });\n        }\n        const bottlenecks = results.filter((r)=>r.isBottleneck);\n        if (bottlenecks.length > 0) {\n            tips.push({\n                title: \"Performance Bottlenecks Detected\",\n                description: \"\".concat(bottlenecks.length, \" layers showing high computation time\"),\n                impact: \"high\",\n                category: \"performance\"\n            });\n        }\n        return tips;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/model/simulator.ts\n"));

/***/ })

});