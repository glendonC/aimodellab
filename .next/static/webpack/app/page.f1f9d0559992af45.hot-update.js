"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/model/nvidia-optimizer.ts":
/*!***************************************!*\
  !*** ./lib/model/nvidia-optimizer.ts ***!
  \***************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NvidiaOptimizer: function() { return /* binding */ NvidiaOptimizer; }\n/* harmony export */ });\n// nvidia-optimizer.ts\nclass NvidiaOptimizer {\n    async optimizeModel(modelId, currentMetrics) {\n        const modelType = this.detectModelType(modelId);\n        const config = this.generateOptimizationConfig(modelType);\n        // Convert input metrics to ModelMetrics format\n        const originalMetrics = {\n            inferenceSpeed: currentMetrics.fps || 0,\n            latency: currentMetrics.latency || 0,\n            memoryUsage: currentMetrics.memory || 0,\n            utilization: currentMetrics.utilization || 0\n        };\n        // Get optimization improvements\n        const optimizationResults = await this.applyTensorRTOptimizations(modelType, originalMetrics, config);\n        // Calculate optimized metrics based on improvements\n        const optimizedMetrics = {\n            inferenceSpeed: originalMetrics.inferenceSpeed * optimizationResults.speedupFactor,\n            latency: originalMetrics.latency * (1 - optimizationResults.latencyImprovement / 100),\n            memoryUsage: originalMetrics.memoryUsage * (1 - optimizationResults.memoryReduction / 100),\n            utilization: originalMetrics.utilization * 0.8\n        };\n        const result = {\n            modelType,\n            originalMetrics,\n            optimizedMetrics,\n            optimizations: {\n                tensorRT: {\n                    enabled: true,\n                    precisionMode: config.precision,\n                    layerFusion: config.layerFusion,\n                    dynamicBatching: config.dynamicBatching\n                },\n                rapids: {\n                    enabled: this.shouldUseRapids(modelType),\n                    dataflowOptimized: true,\n                    memoryPooling: true\n                },\n                performance: {\n                    speedupFactor: optimizationResults.speedupFactor,\n                    memoryReduction: optimizationResults.memoryReduction,\n                    latencyImprovement: optimizationResults.latencyImprovement\n                }\n            }\n        };\n        this.optimizationState.set(modelId, result);\n        return result;\n    }\n    detectModelType(modelId) {\n        const id = modelId.toLowerCase();\n        if (id.includes(\"resnet\")) return \"CNN\";\n        if (id.includes(\"yolo\")) return \"DETECTION\";\n        if (id.includes(\"stable\")) return \"DIFFUSION\";\n        if (id.includes(\"llama\") || id.includes(\"gpt\")) return \"LLM\";\n        if (id.includes(\"vit\")) return \"VISION_TRANSFORMER\";\n        return \"CNN\"; // Default\n    }\n    generateOptimizationConfig(modelType) {\n        switch(modelType){\n            case \"DETECTION\":\n                return {\n                    precision: \"FP16\",\n                    batchSize: 16,\n                    workspace: 4,\n                    layerFusion: true,\n                    dynamicBatching: true\n                };\n            case \"DIFFUSION\":\n                return {\n                    precision: \"FP16\",\n                    batchSize: 1,\n                    workspace: 8,\n                    layerFusion: true,\n                    dynamicBatching: false\n                };\n            case \"LLM\":\n                return {\n                    precision: \"INT8\",\n                    batchSize: 1,\n                    workspace: 16,\n                    layerFusion: true,\n                    dynamicBatching: false\n                };\n            default:\n                return {\n                    precision: \"FP16\",\n                    batchSize: 32,\n                    workspace: 4,\n                    layerFusion: true,\n                    dynamicBatching: true\n                };\n        }\n    }\n    async applyTensorRTOptimizations(modelType, metrics, config) {\n        const optimizations = {\n            DETECTION: {\n                speedupFactor: 2.8,\n                memoryReduction: 20,\n                latencyImprovement: 65\n            },\n            DIFFUSION: {\n                speedupFactor: 2.2,\n                memoryReduction: 15,\n                latencyImprovement: 55\n            },\n            LLM: {\n                speedupFactor: 1.8,\n                memoryReduction: 10,\n                latencyImprovement: 45\n            },\n            DEFAULT: {\n                speedupFactor: 2.4,\n                memoryReduction: 25,\n                latencyImprovement: 60\n            }\n        };\n        const improvements = optimizations[modelType] || optimizations.DEFAULT;\n        // Return OptimizationMetrics directly instead of ModelMetrics\n        return {\n            speedupFactor: improvements.speedupFactor,\n            memoryReduction: improvements.memoryReduction,\n            latencyImprovement: improvements.latencyImprovement,\n            tensorRTMode: config.precision,\n            layerFusion: config.layerFusion,\n            rapidsAcceleration: this.shouldUseRapids(modelType)\n        };\n    }\n    shouldUseRapids(modelType) {\n        return [\n            \"DETECTION\",\n            \"DIFFUSION\"\n        ].includes(modelType);\n    }\n    getOptimizationState(modelId) {\n        return this.optimizationState.get(modelId) || null;\n    }\n    clearOptimizationState(modelId) {\n        this.optimizationState.delete(modelId);\n    }\n    constructor(){\n        this.optimizationState = new Map();\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2xpYi9tb2RlbC9udmlkaWEtb3B0aW1pemVyLnRzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxzQkFBc0I7QUE2RGYsTUFBTUE7SUFHWCxNQUFNQyxjQUFjQyxPQUFlLEVBQUVDLGNBQW1CLEVBQStCO1FBQ3JGLE1BQU1DLFlBQVksSUFBSSxDQUFDQyxlQUFlLENBQUNIO1FBQ3ZDLE1BQU1JLFNBQVMsSUFBSSxDQUFDQywwQkFBMEIsQ0FBQ0g7UUFFL0MsK0NBQStDO1FBQy9DLE1BQU1JLGtCQUFnQztZQUNwQ0MsZ0JBQWdCTixlQUFlTyxHQUFHLElBQUk7WUFDdENDLFNBQVNSLGVBQWVRLE9BQU8sSUFBSTtZQUNuQ0MsYUFBYVQsZUFBZVUsTUFBTSxJQUFJO1lBQ3RDQyxhQUFhWCxlQUFlVyxXQUFXLElBQUk7UUFDN0M7UUFFQSxnQ0FBZ0M7UUFDaEMsTUFBTUMsc0JBQXNCLE1BQU0sSUFBSSxDQUFDQywwQkFBMEIsQ0FDL0RaLFdBQ0FJLGlCQUNBRjtRQUdGLG9EQUFvRDtRQUNwRCxNQUFNVyxtQkFBaUM7WUFDckNSLGdCQUFnQkQsZ0JBQWdCQyxjQUFjLEdBQUdNLG9CQUFvQkcsYUFBYTtZQUNsRlAsU0FBU0gsZ0JBQWdCRyxPQUFPLEdBQUksS0FBSUksb0JBQW9CSSxrQkFBa0IsR0FBQyxHQUFFO1lBQ2pGUCxhQUFhSixnQkFBZ0JJLFdBQVcsR0FBSSxLQUFJRyxvQkFBb0JLLGVBQWUsR0FBQyxHQUFFO1lBQ3RGTixhQUFhTixnQkFBZ0JNLFdBQVcsR0FBRztRQUM3QztRQUVBLE1BQU1PLFNBQTZCO1lBQ2pDakI7WUFDQUk7WUFDQVM7WUFDQUssZUFBZTtnQkFDYkMsVUFBVTtvQkFDUkMsU0FBUztvQkFDVEMsZUFBZW5CLE9BQU9vQixTQUFTO29CQUMvQkMsYUFBYXJCLE9BQU9xQixXQUFXO29CQUMvQkMsaUJBQWlCdEIsT0FBT3NCLGVBQWU7Z0JBQ3pDO2dCQUNBQyxRQUFRO29CQUNOTCxTQUFTLElBQUksQ0FBQ00sZUFB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IndlYnBhY2s6Ly9fTl9FLy4vbGliL21vZGVsL252aWRpYS1vcHRpbWl6ZXIudHM/OTY5MyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBudmlkaWEtb3B0aW1pemVyLnRzXG5pbXBvcnQgeyBNT0RFTF9CRU5DSE1BUktTIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuXG5pbnRlcmZhY2UgTW9kZWxNZXRyaWNzIHtcbiAgaW5mZXJlbmNlU3BlZWQ6IG51bWJlcjtcbiAgbGF0ZW5jeTogbnVtYmVyO1xuICBtZW1vcnlVc2FnZTogbnVtYmVyO1xuICB1dGlsaXphdGlvbjogbnVtYmVyO1xufVxuXG5pbnRlcmZhY2UgT3B0aW1pemF0aW9uTWV0cmljcyB7XG4gIHNwZWVkdXBGYWN0b3I6IG51bWJlcjtcbiAgbWVtb3J5UmVkdWN0aW9uOiBudW1iZXI7XG4gIGxhdGVuY3lJbXByb3ZlbWVudDogbnVtYmVyO1xuICB0ZW5zb3JSVE1vZGU6IHN0cmluZztcbiAgbGF5ZXJGdXNpb246IGJvb2xlYW47XG4gIHJhcGlkc0FjY2VsZXJhdGlvbjogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBPcHRpbWl6YXRpb25SZXN1bHQge1xuICBtb2RlbFR5cGU6IHN0cmluZztcbiAgb3JpZ2luYWxNZXRyaWNzOiBNb2RlbE1ldHJpY3M7XG4gIG9wdGltaXplZE1ldHJpY3M6IE1vZGVsTWV0cmljcztcbiAgb3B0aW1pemF0aW9uczoge1xuICAgIHRlbnNvclJUOiB7XG4gICAgICBlbmFibGVkOiBib29sZWFuO1xuICAgICAgcHJlY2lzaW9uTW9kZTogJ0ZQMzInIHwgJ0ZQMTYnIHwgJ0lOVDgnO1xuICAgICAgbGF5ZXJGdXNpb246IGJvb2xlYW47XG4gICAgICBkeW5hbWljQmF0Y2hpbmc6IGJvb2xlYW47XG4gICAgfTtcbiAgICByYXBpZHM6IHtcbiAgICAgIGVuYWJsZWQ6IGJvb2xlYW47XG4gICAgICBkYXRhZmxvd09wdGltaXplZDogYm9vbGVhbjtcbiAgICAgIG1lbW9yeVBvb2xpbmc6IGJvb2xlYW47XG4gICAgfTtcbiAgICBwZXJmb3JtYW5jZToge1xuICAgICAgc3BlZWR1cEZhY3RvcjogbnVtYmVyO1xuICAgICAgbWVtb3J5UmVkdWN0aW9uOiBudW1iZXI7XG4gICAgICBsYXRlbmN5SW1wcm92ZW1lbnQ6IG51bWJlcjtcbiAgICB9O1xuICB9O1xufVxuXG5pbnRlcmZhY2UgVGVuc29yUlRDb25maWcge1xuICBwcmVjaXNpb246ICdGUDMyJyB8ICdGUDE2JyB8ICdJTlQ4JztcbiAgYmF0Y2hTaXplOiBudW1iZXI7XG4gIHdvcmtzcGFjZTogbnVtYmVyOyAvLyBHQlxuICBsYXllckZ1c2lvbjogYm9vbGVhbjtcbiAgZHluYW1pY0JhdGNoaW5nOiBib29sZWFuO1xufVxuXG50eXBlIE9wdGltaXphdGlvblR5cGUgPSB7XG4gIHNwZWVkdXBGYWN0b3I6IG51bWJlcjtcbiAgbWVtb3J5UmVkdWN0aW9uOiBudW1iZXI7XG4gIGxhdGVuY3lJbXByb3ZlbWVudDogbnVtYmVyO1xufTtcblxudHlwZSBPcHRpbWl6YXRpb25zTWFwID0ge1xuICBba2V5IGluICdERVRFQ1RJT04nIHwgJ0RJRkZVU0lPTicgfCAnTExNJyB8ICdERUZBVUxUJ106IE9wdGltaXphdGlvblR5cGU7XG59O1xuXG5leHBvcnQgY2xhc3MgTnZpZGlhT3B0aW1pemVyIHtcbiAgcHJpdmF0ZSBvcHRpbWl6YXRpb25TdGF0ZTogTWFwPHN0cmluZywgT3B0aW1pemF0aW9uUmVzdWx0PiA9IG5ldyBNYXAoKTtcblxuICBhc3luYyBvcHRpbWl6ZU1vZGVsKG1vZGVsSWQ6IHN0cmluZywgY3VycmVudE1ldHJpY3M6IGFueSk6IFByb21pc2U8T3B0aW1pemF0aW9uUmVzdWx0PiB7XG4gICAgY29uc3QgbW9kZWxUeXBlID0gdGhpcy5kZXRlY3RNb2RlbFR5cGUobW9kZWxJZCk7XG4gICAgY29uc3QgY29uZmlnID0gdGhpcy5nZW5lcmF0ZU9wdGltaXphdGlvbkNvbmZpZyhtb2RlbFR5cGUpO1xuICAgIFxuICAgIC8vIENvbnZlcnQgaW5wdXQgbWV0cmljcyB0byBNb2RlbE1ldHJpY3MgZm9ybWF0XG4gICAgY29uc3Qgb3JpZ2luYWxNZXRyaWNzOiBNb2RlbE1ldHJpY3MgPSB7XG4gICAgICBpbmZlcmVuY2VTcGVlZDogY3VycmVudE1ldHJpY3MuZnBzIHx8IDAsXG4gICAgICBsYXRlbmN5OiBjdXJyZW50TWV0cmljcy5sYXRlbmN5IHx8IDAsXG4gICAgICBtZW1vcnlVc2FnZTogY3VycmVudE1ldHJpY3MubWVtb3J5IHx8IDAsXG4gICAgICB1dGlsaXphdGlvbjogY3VycmVudE1ldHJpY3MudXRpbGl6YXRpb24gfHwgMFxuICAgIH07XG5cbiAgICAvLyBHZXQgb3B0aW1pemF0aW9uIGltcHJvdmVtZW50c1xuICAgIGNvbnN0IG9wdGltaXphdGlvblJlc3VsdHMgPSBhd2FpdCB0aGlzLmFwcGx5VGVuc29yUlRPcHRpbWl6YXRpb25zKFxuICAgICAgbW9kZWxUeXBlLFxuICAgICAgb3JpZ2luYWxNZXRyaWNzLFxuICAgICAgY29uZmlnXG4gICAgKTtcblxuICAgIC8vIENhbGN1bGF0ZSBvcHRpbWl6ZWQgbWV0cmljcyBiYXNlZCBvbiBpbXByb3ZlbWVudHNcbiAgICBjb25zdCBvcHRpbWl6ZWRNZXRyaWNzOiBNb2RlbE1ldHJpY3MgPSB7XG4gICAgICBpbmZlcmVuY2VTcGVlZDogb3JpZ2luYWxNZXRyaWNzLmluZmVyZW5jZVNwZWVkICogb3B0aW1pemF0aW9uUmVzdWx0cy5zcGVlZHVwRmFjdG9yLFxuICAgICAgbGF0ZW5jeTogb3JpZ2luYWxNZXRyaWNzLmxhdGVuY3kgKiAoMSAtIG9wdGltaXphdGlvblJlc3VsdHMubGF0ZW5jeUltcHJvdmVtZW50LzEwMCksXG4gICAgICBtZW1vcnlVc2FnZTogb3JpZ2luYWxNZXRyaWNzLm1lbW9yeVVzYWdlICogKDEgLSBvcHRpbWl6YXRpb25SZXN1bHRzLm1lbW9yeVJlZHVjdGlvbi8xMDApLFxuICAgICAgdXRpbGl6YXRpb246IG9yaWdpbmFsTWV0cmljcy51dGlsaXphdGlvbiAqIDAuOFxuICAgIH07XG5cbiAgICBjb25zdCByZXN1bHQ6IE9wdGltaXphdGlvblJlc3VsdCA9IHtcbiAgICAgIG1vZGVsVHlwZSxcbiAgICAgIG9yaWdpbmFsTWV0cmljcyxcbiAgICAgIG9wdGltaXplZE1ldHJpY3MsXG4gICAgICBvcHRpbWl6YXRpb25zOiB7XG4gICAgICAgIHRlbnNvclJUOiB7XG4gICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICBwcmVjaXNpb25Nb2RlOiBjb25maWcucHJlY2lzaW9uLFxuICAgICAgICAgIGxheWVyRnVzaW9uOiBjb25maWcubGF5ZXJGdXNpb24sXG4gICAgICAgICAgZHluYW1pY0JhdGNoaW5nOiBjb25maWcuZHluYW1pY0JhdGNoaW5nXG4gICAgICAgIH0sXG4gICAgICAgIHJhcGlkczoge1xuICAgICAgICAgIGVuYWJsZWQ6IHRoaXMuc2hvdWxkVXNlUmFwaWRzKG1vZGVsVHlwZSksXG4gICAgICAgICAgZGF0YWZsb3dPcHRpbWl6ZWQ6IHRydWUsXG4gICAgICAgICAgbWVtb3J5UG9vbGluZzogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBwZXJmb3JtYW5jZToge1xuICAgICAgICAgIHNwZWVkdXBGYWN0b3I6IG9wdGltaXphdGlvblJlc3VsdHMuc3BlZWR1cEZhY3RvcixcbiAgICAgICAgICBtZW1vcnlSZWR1Y3Rpb246IG9wdGltaXphdGlvblJlc3VsdHMubWVtb3J5UmVkdWN0aW9uLFxuICAgICAgICAgIGxhdGVuY3lJbXByb3ZlbWVudDogb3B0aW1pemF0aW9uUmVzdWx0cy5sYXRlbmN5SW1wcm92ZW1lbnRcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLm9wdGltaXphdGlvblN0YXRlLnNldChtb2RlbElkLCByZXN1bHQpO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbiAgcHJpdmF0ZSBkZXRlY3RNb2RlbFR5cGUobW9kZWxJZDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCBpZCA9IG1vZGVsSWQudG9Mb3dlckNhc2UoKTtcbiAgICBcbiAgICBpZiAoaWQuaW5jbHVkZXMoJ3Jlc25ldCcpKSByZXR1cm4gJ0NOTic7XG4gICAgaWYgKGlkLmluY2x1ZGVzKCd5b2xvJykpIHJldHVybiAnREVURUNUSU9OJztcbiAgICBpZiAoaWQuaW5jbHVkZXMoJ3N0YWJsZScpKSByZXR1cm4gJ0RJRkZVU0lPTic7XG4gICAgaWYgKGlkLmluY2x1ZGVzKCdsbGFtYScpIHx8IGlkLmluY2x1ZGVzKCdncHQnKSkgcmV0dXJuICdMTE0nO1xuICAgIGlmIChpZC5pbmNsdWRlcygndml0JykpIHJldHVybiAnVklTSU9OX1RSQU5TRk9STUVSJztcbiAgICBcbiAgICByZXR1cm4gJ0NOTic7IC8vIERlZmF1bHRcbiAgfVxuXG4gIHByaXZhdGUgZ2VuZXJhdGVPcHRpbWl6YXRpb25Db25maWcobW9kZWxUeXBlOiBzdHJpbmcpOiBUZW5zb3JSVENvbmZpZyB7XG4gICAgc3dpdGNoIChtb2RlbFR5cGUpIHtcbiAgICAgIGNhc2UgJ0RFVEVDVElPTic6XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcHJlY2lzaW9uOiAnRlAxNicsXG4gICAgICAgICAgYmF0Y2hTaXplOiAxNixcbiAgICAgICAgICB3b3Jrc3BhY2U6IDQsXG4gICAgICAgICAgbGF5ZXJGdXNpb246IHRydWUsXG4gICAgICAgICAgZHluYW1pY0JhdGNoaW5nOiB0cnVlXG4gICAgICAgIH07XG4gICAgICBjYXNlICdESUZGVVNJT04nOlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHByZWNpc2lvbjogJ0ZQMTYnLFxuICAgICAgICAgIGJhdGNoU2l6ZTogMSxcbiAgICAgICAgICB3b3Jrc3BhY2U6IDgsXG4gICAgICAgICAgbGF5ZXJGdXNpb246IHRydWUsXG4gICAgICAgICAgZHluYW1pY0JhdGNoaW5nOiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgY2FzZSAnTExNJzpcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBwcmVjaXNpb246ICdJTlQ4JyxcbiAgICAgICAgICBiYXRjaFNpemU6IDEsXG4gICAgICAgICAgd29ya3NwYWNlOiAxNixcbiAgICAgICAgICBsYXllckZ1c2lvbjogdHJ1ZSxcbiAgICAgICAgICBkeW5hbWljQmF0Y2hpbmc6IGZhbHNlXG4gICAgICAgIH07XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHByZWNpc2lvbjogJ0ZQMTYnLFxuICAgICAgICAgIGJhdGNoU2l6ZTogMzIsXG4gICAgICAgICAgd29ya3NwYWNlOiA0LFxuICAgICAgICAgIGxheWVyRnVzaW9uOiB0cnVlLFxuICAgICAgICAgIGR5bmFtaWNCYXRjaGluZzogdHJ1ZVxuICAgICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgYXBwbHlUZW5zb3JSVE9wdGltaXphdGlvbnMoXG4gICAgbW9kZWxUeXBlOiBzdHJpbmcsXG4gICAgbWV0cmljczogTW9kZWxNZXRyaWNzLFxuICAgIGNvbmZpZzogVGVuc29yUlRDb25maWdcbiAgKTogUHJvbWlzZTxPcHRpbWl6YXRpb25NZXRyaWNzPiB7ICAvLyBDaGFuZ2UgcmV0dXJuIHR5cGUgdG8gT3B0aW1pemF0aW9uTWV0cmljc1xuICAgIGNvbnN0IG9wdGltaXphdGlvbnM6IE9wdGltaXphdGlvbnNNYXAgPSB7XG4gICAgICBERVRFQ1RJT046IHtcbiAgICAgICAgc3BlZWR1cEZhY3RvcjogMi44LFxuICAgICAgICBtZW1vcnlSZWR1Y3Rpb246IDIwLFxuICAgICAgICBsYXRlbmN5SW1wcm92ZW1lbnQ6IDY1LFxuICAgICAgfSxcbiAgICAgIERJRkZVU0lPTjoge1xuICAgICAgICBzcGVlZHVwRmFjdG9yOiAyLjIsXG4gICAgICAgIG1lbW9yeVJlZHVjdGlvbjogMTUsXG4gICAgICAgIGxhdGVuY3lJbXByb3ZlbWVudDogNTUsXG4gICAgICB9LFxuICAgICAgTExNOiB7XG4gICAgICAgIHNwZWVkdXBGYWN0b3I6IDEuOCxcbiAgICAgICAgbWVtb3J5UmVkdWN0aW9uOiAxMCxcbiAgICAgICAgbGF0ZW5jeUltcHJvdmVtZW50OiA0NSxcbiAgICAgIH0sXG4gICAgICBERUZBVUxUOiB7XG4gICAgICAgIHNwZWVkdXBGYWN0b3I6IDIuNCxcbiAgICAgICAgbWVtb3J5UmVkdWN0aW9uOiAyNSxcbiAgICAgICAgbGF0ZW5jeUltcHJvdmVtZW50OiA2MCxcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3QgaW1wcm92ZW1lbnRzID0gb3B0aW1pemF0aW9uc1ttb2RlbFR5cGUgYXMga2V5b2YgT3B0aW1pemF0aW9uc01hcF0gfHwgb3B0aW1pemF0aW9ucy5ERUZBVUxUO1xuXG4gICAgLy8gUmV0dXJuIE9wdGltaXphdGlvbk1ldHJpY3MgZGlyZWN0bHkgaW5zdGVhZCBvZiBNb2RlbE1ldHJpY3NcbiAgICByZXR1cm4ge1xuICAgICAgc3BlZWR1cEZhY3RvcjogaW1wcm92ZW1lbnRzLnNwZWVkdXBGYWN0b3IsXG4gICAgICBtZW1vcnlSZWR1Y3Rpb246IGltcHJvdmVtZW50cy5tZW1vcnlSZWR1Y3Rpb24sXG4gICAgICBsYXRlbmN5SW1wcm92ZW1lbnQ6IGltcHJvdmVtZW50cy5sYXRlbmN5SW1wcm92ZW1lbnQsXG4gICAgICB0ZW5zb3JSVE1vZGU6IGNvbmZpZy5wcmVjaXNpb24sXG4gICAgICBsYXllckZ1c2lvbjogY29uZmlnLmxheWVyRnVzaW9uLFxuICAgICAgcmFwaWRzQWNjZWxlcmF0aW9uOiB0aGlzLnNob3VsZFVzZVJhcGlkcyhtb2RlbFR5cGUpXG4gICAgfTtcbn1cblxuICBwcml2YXRlIHNob3VsZFVzZVJhcGlkcyhtb2RlbFR5cGU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBbJ0RFVEVDVElPTicsICdESUZGVVNJT04nXS5pbmNsdWRlcyhtb2RlbFR5cGUpO1xuICB9XG5cbiAgZ2V0T3B0aW1pemF0aW9uU3RhdGUobW9kZWxJZDogc3RyaW5nKTogT3B0aW1pemF0aW9uUmVzdWx0IHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW1pemF0aW9uU3RhdGUuZ2V0KG1vZGVsSWQpIHx8IG51bGw7XG4gIH1cblxuICBjbGVhck9wdGltaXphdGlvblN0YXRlKG1vZGVsSWQ6IHN0cmluZykge1xuICAgIHRoaXMub3B0aW1pemF0aW9uU3RhdGUuZGVsZXRlKG1vZGVsSWQpO1xuICB9XG59Il0sIm5hbWVzIjpbIk52aWRpYU9wdGltaXplciIsIm9wdGltaXplTW9kZWwiLCJtb2RlbElkIiwiY3VycmVudE1ldHJpY3MiLCJtb2RlbFR5cGUiLCJkZXRlY3RNb2RlbFR5cGUiLCJjb25maWciLCJnZW5lcmF0ZU9wdGltaXphdGlvbkNvbmZpZyIsIm9yaWdpbmFsTWV0cmljcyIsImluZmVyZW5jZVNwZWVkIiwiZnBzIiwibGF0ZW5jeSIsIm1lbW9yeVVzYWdlIiwibWVtb3J5IiwidXRpbGl6YXRpb24iLCJvcHRpbWl6YXRpb25SZXN1bHRzIiwiYXBwbHlUZW5zb3JSVE9wdGltaXphdGlvbnMiLCJvcHRpbWl6ZWRNZXRyaWNzIiwic3BlZWR1cEZhY3RvciIsImxhdGVuY3lJbXByb3ZlbWVudCIsIm1lbW9yeVJlZHVjdGlvbiIsInJlc3VsdCIsIm9wdGltaXphdGlvbnMiLCJ0ZW5zb3JSVCIsImVuYWJsZWQiLCJwcmVjaXNpb25Nb2RlIiwicHJlY2lzaW9uIiwibGF5ZXJGdXNpb24iLCJkeW5hbWljQmF0Y2hpbmciLCJyYXBpZHMiLCJzaG91bGRVc2VSYXBpZHMiLCJkYXRhZmxvd09wdGltaXplZCIsIm1lbW9yeVBvb2xpbmciLCJwZXJmb3JtYW5jZSIsIm9wdGltaXphdGlvblN0YXRlIiwic2V0IiwiaWQiLCJ0b0xvd2VyQ2FzZSIsImluY2x1ZGVzIiwiYmF0Y2hTaXplIiwid29ya3NwYWNlIiwibWV0cmljcyIsIkRFVEVDVElPTiIsIkRJRkZVU0lPTiIsIkxMTSIsIkRFRkFVTFQiLCJpbXByb3ZlbWVudHMiLCJ0ZW5zb3JSVE1vZGUiLCJyYXBpZHNBY2NlbGVyYXRpb24iLCJnZXRPcHRpbWl6YXRpb25TdGF0ZSIsImdldCIsImNsZWFyT3B0aW1pemF0aW9uU3RhdGUiLCJkZWxldGUiLCJNYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/model/nvidia-optimizer.ts\n"));

/***/ })

});