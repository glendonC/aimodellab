"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/model/constants.ts":
/*!********************************!*\
  !*** ./lib/model/constants.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CPU_BENCHMARKS: function() { return /* binding */ CPU_BENCHMARKS; },\n/* harmony export */   NVIDIA_BENCHMARKS: function() { return /* binding */ NVIDIA_BENCHMARKS; }\n/* harmony export */ });\nconst NVIDIA_BENCHMARKS = {\n    resnet50: {\n        a100: {\n            batchSize1: {\n                fps: 615,\n                latency: 1.6,\n                memory: 98,\n                powerDraw: 250 // Watts\n            },\n            batchSize32: {\n                fps: 2480,\n                latency: 12.9,\n                memory: 1205,\n                powerDraw: 315\n            }\n        }\n    }\n};\nconst CPU_BENCHMARKS = {\n    \"xeon-8380\": {\n        resnet50: {\n            batchSize1: {\n                fps: 52,\n                latency: 19.2,\n                memory: 147\n            }\n        }\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2xpYi9tb2RlbC9jb25zdGFudHMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBTyxNQUFNQSxvQkFBb0I7SUFDL0JDLFVBQVU7UUFDUkMsTUFBTTtZQUNKQyxZQUFZO2dCQUNWQyxLQUFLO2dCQUNMQyxTQUFTO2dCQUNUQyxRQUFRO2dCQUNSQyxXQUFXLElBQU0sUUFBUTtZQUMzQjtZQUNBQyxhQUFhO2dCQUNYSixLQUFLO2dCQUNMQyxTQUFTO2dCQUNUQyxRQUFRO2dCQUNSQyxXQUFXO1lBQ2I7UUFDRjtJQUNGO0FBRUYsRUFBVztBQUVKLE1BQU1FLGlCQUFpQjtJQUM1QixhQUFhO1FBQ1hSLFVBQVU7WUFDUkUsWUFBWTtnQkFDVkMsS0FBSztnQkFDTEMsU0FBUztnQkFDVEMsUUFBUTtZQUNWO1FBQ0Y7SUFFRjtBQUNGLEVBQVciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbGliL21vZGVsL2NvbnN0YW50cy50cz9jN2YxIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBOVklESUFfQkVOQ0hNQVJLUyA9IHtcbiAgcmVzbmV0NTA6IHtcbiAgICBhMTAwOiB7XG4gICAgICBiYXRjaFNpemUxOiB7XG4gICAgICAgIGZwczogNjE1LFxuICAgICAgICBsYXRlbmN5OiAxLjYsICAgIC8vIG1zXG4gICAgICAgIG1lbW9yeTogOTgsICAgICAgLy8gTUJcbiAgICAgICAgcG93ZXJEcmF3OiAyNTAgICAvLyBXYXR0c1xuICAgICAgfSxcbiAgICAgIGJhdGNoU2l6ZTMyOiB7XG4gICAgICAgIGZwczogMjQ4MCxcbiAgICAgICAgbGF0ZW5jeTogMTIuOSxcbiAgICAgICAgbWVtb3J5OiAxMjA1LFxuICAgICAgICBwb3dlckRyYXc6IDMxNVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgLy8gLi4uIHJlc3Qgb2YgdGhlIGJlbmNobWFya3Ncbn0gYXMgY29uc3Q7XG5cbmV4cG9ydCBjb25zdCBDUFVfQkVOQ0hNQVJLUyA9IHtcbiAgJ3hlb24tODM4MCc6IHtcbiAgICByZXNuZXQ1MDoge1xuICAgICAgYmF0Y2hTaXplMToge1xuICAgICAgICBmcHM6IDUyLFxuICAgICAgICBsYXRlbmN5OiAxOS4yLFxuICAgICAgICBtZW1vcnk6IDE0N1xuICAgICAgfVxuICAgIH0sXG4gICAgLy8gLi4uIHJlc3Qgb2YgdGhlIGJlbmNobWFya3NcbiAgfVxufSBhcyBjb25zdDsgIl0sIm5hbWVzIjpbIk5WSURJQV9CRU5DSE1BUktTIiwicmVzbmV0NTAiLCJhMTAwIiwiYmF0Y2hTaXplMSIsImZwcyIsImxhdGVuY3kiLCJtZW1vcnkiLCJwb3dlckRyYXciLCJiYXRjaFNpemUzMiIsIkNQVV9CRU5DSE1BUktTIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/model/constants.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./lib/model/performance.ts":
/*!**********************************!*\
  !*** ./lib/model/performance.ts ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PerformanceCalculator: function() { return /* binding */ PerformanceCalculator; }\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"(app-pages-browser)/./lib/model/constants.ts\");\n\n// Polars-like DataFrame implementation for browser\nclass DataFrame {\n    select(column) {\n        if (!this.data.length) {\n            return {\n                sum: ()=>0,\n                mean: ()=>0\n            };\n        }\n        return {\n            sum: ()=>this.data.reduce((acc, row)=>acc + (row[column] || 0), 0),\n            mean: ()=>this.data.reduce((acc, row)=>acc + (row[column] || 0), 0) / this.data.length\n        };\n    }\n    static fromRecords(records) {\n        return new DataFrame(records || []);\n    }\n    constructor(data){\n        this.data = data || []; // Ensure data is never undefined\n    }\n}\nclass PerformanceCalculator {\n    calculateWithPolars(analysisResult) {\n        const { metadata, layers = [] } = analysisResult.graph || {};\n        try {\n            const df = DataFrame.fromRecords(layers);\n            // Calculate base metrics\n            const totalFlops = df.select(\"flops\").sum() || (metadata === null || metadata === void 0 ? void 0 : metadata.totalFlops) || 0;\n            const totalMemory = df.select(\"memory\").sum() || (metadata === null || metadata === void 0 ? void 0 : metadata.totalMemory) || 0;\n            const paramsPerLayer = df.select(\"parameters\").mean();\n            // Calculate CPU-specific base metrics\n            return {\n                fps: Math.min(60, 1000 / Math.max(1, totalFlops / 1e9)),\n                latency: Math.max(2.0, totalFlops / 1e9 * 3.5),\n                memory: Math.max(1.5, totalMemory / (1024 * 1024 * 1024)),\n                utilization: Math.min(95, Math.max(25, totalFlops / 1e9 * 0.8)),\n                efficiency: totalFlops / (df.select(\"parameters\").sum() || 1),\n                memoryEfficiency: totalMemory / (df.select(\"parameters\").sum() * 4 || 1)\n            };\n        } catch (e) {\n            console.warn(\"Calculations failed, falling back to simple calculations\", e);\n            return {\n                fps: Math.min(30, 1000 / Math.max(1, (metadata === null || metadata === void 0 ? void 0 : metadata.totalFlops) / 1e9 || 0)),\n                latency: Math.max(2.0, ((metadata === null || metadata === void 0 ? void 0 : metadata.totalFlops) / 1e9 || 0) * 3.5),\n                memory: Math.max(1.5, ((metadata === null || metadata === void 0 ? void 0 : metadata.totalMemory) || 0) / (1024 * 1024 * 1024)),\n                utilization: Math.min(95, ((metadata === null || metadata === void 0 ? void 0 : metadata.totalFlops) / 1e9 || 0) * 0.8),\n                efficiency: 0,\n                memoryEfficiency: 0\n            };\n        }\n    }\n    getModelCharacteristics(modelId, totalFlops, totalMemory) {\n        var _modelId_toLowerCase;\n        const id = (_modelId_toLowerCase = modelId === null || modelId === void 0 ? void 0 : modelId.toLowerCase()) !== null && _modelId_toLowerCase !== void 0 ? _modelId_toLowerCase : \"default\";\n        const flopsInTFlops = totalFlops / 1e12;\n        const memoryInGB = totalMemory / 1024 / 1024 / 1024;\n        // Base characteristics that scale with model size\n        const baseCharacteristics = {\n            minUtilization: Math.max(15, flopsInTFlops * 10),\n            tensorCoreUsage: Math.max(12, flopsInTFlops * 15),\n            memoryBandwidth: Math.max(0.3, flopsInTFlops * 0.5),\n            baseMemory: Math.max(this.GPU_SPECS.minMemoryGB.cnn, memoryInGB * 1.2)\n        };\n        if (id.includes(\"yolo\")) {\n            return {\n                type: \"detection\",\n                batchSize: 16,\n                baseUtilization: Math.max(this.GPU_SPECS.minUtilization.detection, baseCharacteristics.minUtilization),\n                speedupFactor: 2.8,\n                memoryScale: 1.3,\n                tensorCoreUsage: baseCharacteristics.tensorCoreUsage * 1.2,\n                memoryBandwidth: baseCharacteristics.memoryBandwidth * 1.4,\n                features: [\n                    \"INT8 Quantization\",\n                    \"CUDA Graph Acceleration\"\n                ],\n                baseMemory: Math.max(this.GPU_SPECS.minMemoryGB.detection, baseCharacteristics.baseMemory)\n            };\n        }\n        if (id.includes(\"stable\")) {\n            return {\n                type: \"generation\",\n                batchSize: 1,\n                baseUtilization: Math.max(this.GPU_SPECS.minUtilization.generation, baseCharacteristics.minUtilization),\n                speedupFactor: 2.2,\n                memoryScale: 1.5,\n                tensorCoreUsage: baseCharacteristics.tensorCoreUsage * 1.5,\n                memoryBandwidth: baseCharacteristics.memoryBandwidth * 1.8,\n                features: [\n                    \"FP16 Mixed Precision\",\n                    \"Attention Optimization\"\n                ],\n                baseMemory: Math.max(this.GPU_SPECS.minMemoryGB.generation, baseCharacteristics.baseMemory)\n            };\n        }\n        // Default CNN characteristics with realistic minimums\n        return {\n            type: \"cnn\",\n            batchSize: 32,\n            baseUtilization: Math.max(this.GPU_SPECS.minUtilization.cnn, baseCharacteristics.minUtilization),\n            speedupFactor: 2.2,\n            memoryScale: 1.2,\n            tensorCoreUsage: baseCharacteristics.tensorCoreUsage,\n            memoryBandwidth: baseCharacteristics.memoryBandwidth,\n            features: [\n                \"TensorRT Inference\",\n                \"Kernel Fusion\"\n            ],\n            baseMemory: baseCharacteristics.baseMemory\n        };\n    }\n    calculateMetrics(analysisResult, gpuEnabled) {\n        if (!(analysisResult === null || analysisResult === void 0 ? void 0 : analysisResult.graph)) {\n            return this.getDefaultMetrics();\n        }\n        const { totalFlops, totalMemory, modelId } = analysisResult.graph.metadata;\n        // Get baseline benchmarks for comparison\n        const cpuBaseline = _constants__WEBPACK_IMPORTED_MODULE_0__.CPU_BENCHMARKS[\"xeon-8380\"].resnet50.batchSize1;\n        const gpuBaseline = _constants__WEBPACK_IMPORTED_MODULE_0__.NVIDIA_BENCHMARKS.resnet50.a100.batchSize1;\n        // Calculate relative scaling based on model size vs ResNet50\n        const resnet50Flops = 8e9; // ResNet50 has ~8 billion FLOPs\n        const modelScale = totalFlops / resnet50Flops;\n        // CPU metrics scaled from real Xeon benchmark\n        const cpuMetrics = {\n            fps: Math.max(1, cpuBaseline.fps / modelScale),\n            latency: cpuBaseline.latency * modelScale,\n            memory: cpuBaseline.memory * modelScale / 1024,\n            utilization: Math.min(98, cpuBaseline.latency * modelScale * 0.8)\n        };\n        if (!gpuEnabled) {\n            return {\n                cpuMetrics,\n                gpuMetrics: {\n                    fps: 0,\n                    latency: 0,\n                    memory: 0,\n                    utilization: 0\n                },\n                nvOptimizations: null\n            };\n        }\n        // GPU metrics scaled from real A100 benchmark\n        const gpuMetrics = {\n            fps: Math.max(1, gpuBaseline.fps / modelScale),\n            latency: gpuBaseline.latency * modelScale,\n            memory: gpuBaseline.memory * modelScale / 1024,\n            utilization: Math.min(95, gpuBaseline.latency * modelScale * 0.6)\n        };\n        // Calculate real speedup from benchmarked values\n        const actualSpeedup = gpuMetrics.fps / cpuMetrics.fps;\n        return {\n            cpuMetrics,\n            gpuMetrics,\n            nvOptimizations: {\n                tensorCoreUsage: \"\".concat(Math.min(90, modelScale * 25), \"%\"),\n                memoryBandwidth: \"\".concat((modelScale * 0.8).toFixed(1), \" TB/s\"),\n                speedup: \"\".concat(actualSpeedup.toFixed(1), \"x\"),\n                batchSize: 1\n            }\n        };\n    }\n    getDefaultMetrics() {\n        const defaultMetrics = {\n            fps: 0,\n            latency: 0,\n            memory: 0,\n            utilization: 0\n        };\n        return {\n            cpuMetrics: defaultMetrics,\n            gpuMetrics: defaultMetrics,\n            nvOptimizations: null\n        };\n    }\n    constructor(){\n        this.GPU_SPECS = {\n            peakTflops: 312,\n            memoryBandwidth: 2048,\n            tensorCores: 432,\n            maxBatchSize: 32,\n            // Minimum utilization for active models\n            minUtilization: {\n                cnn: 15,\n                transformer: 25,\n                detection: 20,\n                generation: 35 // Stable Diffusion etc\n            },\n            // Minimum memory requirements\n            minMemoryGB: {\n                cnn: 1.5,\n                transformer: 2.8,\n                detection: 2.2,\n                generation: 3.5 // Stable Diffusion etc\n            }\n        };\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/model/performance.ts\n"));

/***/ })

});