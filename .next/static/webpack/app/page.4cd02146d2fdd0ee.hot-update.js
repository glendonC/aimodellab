"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/model/performance.ts":
/*!**********************************!*\
  !*** ./lib/model/performance.ts ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PerformanceCalculator: function() { return /* binding */ PerformanceCalculator; }\n/* harmony export */ });\n// Polars-like DataFrame implementation for browser\nclass DataFrame {\n    select(column) {\n        if (!this.data.length) {\n            return {\n                sum: ()=>0,\n                mean: ()=>0\n            };\n        }\n        return {\n            sum: ()=>this.data.reduce((acc, row)=>acc + (row[column] || 0), 0),\n            mean: ()=>this.data.reduce((acc, row)=>acc + (row[column] || 0), 0) / this.data.length\n        };\n    }\n    static fromRecords(records) {\n        return new DataFrame(records || []);\n    }\n    constructor(data){\n        this.data = data || []; // Ensure data is never undefined\n    }\n}\nclass PerformanceCalculator {\n    calculateWithPolars(analysisResult) {\n        const { metadata, layers = [] } = analysisResult.graph || {};\n        // Create DataFrame with layer metrics and handle missing data\n        const df = DataFrame.fromRecords(layers);\n        // Calculate aggregated metrics with safe fallbacks\n        const metrics = {\n            totalFlops: df.select(\"flops\").sum() || (metadata === null || metadata === void 0 ? void 0 : metadata.totalFlops) || 0,\n            meanFlops: df.select(\"flops\").mean(),\n            totalMemory: df.select(\"memory\").sum() || (metadata === null || metadata === void 0 ? void 0 : metadata.totalMemory) || 0,\n            paramsPerLayer: df.select(\"parameters\").mean()\n        };\n        // Calculate CPU performance metrics with safe values\n        return {\n            fps: Math.min(120, 1000 / Math.max(1, metrics.totalFlops / 1e9)),\n            latency: Math.max(0.5, metrics.totalFlops / 1e9 * 2),\n            memory: Math.max(0.1, metrics.totalMemory / (1024 * 1024 * 1024)),\n            utilization: Math.min(95, metrics.totalFlops / 1e9 * 0.45)\n        };\n    }\n    getModelCharacteristics(modelId, totalFlops) {\n        var _modelId_toLowerCase;\n        const id = (_modelId_toLowerCase = modelId === null || modelId === void 0 ? void 0 : modelId.toLowerCase()) !== null && _modelId_toLowerCase !== void 0 ? _modelId_toLowerCase : \"default\";\n        const batchSize = 16; // Default batch size\n        if (id.includes(\"yolo\")) {\n            return {\n                type: \"detection\",\n                batchSize,\n                baseUtilization: this.GPU_SPECS.baselineUtilization.detection,\n                speedupFactor: 3.5,\n                memoryEfficiency: 0.7,\n                tensorCoreUsage: Math.min(85, totalFlops / 1e12 * 40),\n                features: [\n                    \"INT8 Quantization\",\n                    \"CUDA Graph Acceleration\",\n                    \"TensorRT Optimizations\"\n                ]\n            };\n        }\n        if (id.includes(\"stable\")) {\n            return {\n                type: \"generation\",\n                batchSize: 1,\n                baseUtilization: this.GPU_SPECS.baselineUtilization.generation,\n                speedupFactor: 2.2,\n                memoryEfficiency: 0.85,\n                tensorCoreUsage: Math.min(90, totalFlops / 1e12 * 50),\n                features: [\n                    \"FP16 Mixed Precision\",\n                    \"Attention Optimization\",\n                    \"Memory Pooling\"\n                ]\n            };\n        }\n        if (id.includes(\"llama\") || id.includes(\"gpt\")) {\n            return {\n                type: \"transformer\",\n                batchSize: 8,\n                baseUtilization: this.GPU_SPECS.baselineUtilization.transformer,\n                speedupFactor: 2.8,\n                memoryEfficiency: 0.8,\n                tensorCoreUsage: Math.min(88, totalFlops / 1e12 * 45),\n                features: [\n                    \"FP16 Inference\",\n                    \"KV Cache Optimization\",\n                    \"Dynamic Batching\"\n                ]\n            };\n        }\n        // Default CNN characteristics\n        return {\n            type: \"cnn\",\n            batchSize,\n            baseUtilization: this.GPU_SPECS.baselineUtilization.cnn,\n            speedupFactor: 4.0,\n            memoryEfficiency: 0.65,\n            tensorCoreUsage: Math.min(75, totalFlops / 1e12 * 35),\n            features: [\n                \"TensorRT Inference\",\n                \"Kernel Fusion\",\n                \"Layer Optimization\"\n            ]\n        };\n    }\n    calculateMetrics(analysisResult, gpuEnabled) {\n        if (!(analysisResult === null || analysisResult === void 0 ? void 0 : analysisResult.graph)) {\n            return this.getDefaultMetrics();\n        }\n        const { totalFlops = 0, totalMemory = 0, modelId } = analysisResult.graph.metadata;\n        const modelCharacteristics = this.getModelCharacteristics(modelId, totalFlops);\n        // Calculate base CPU metrics\n        const cpuMetrics = {\n            fps: Math.min(60, 1000 / Math.max(1, totalFlops / 1e9 * 2)),\n            latency: Math.max(1.0, totalFlops / 1e9 * 2.5),\n            memory: Math.max(0.2, totalMemory / (1024 * 1024 * 1024) * 1.2),\n            utilization: Math.min(98, totalFlops / 1e9 * 0.6)\n        };\n        if (!gpuEnabled) {\n            return {\n                cpuMetrics,\n                gpuMetrics: cpuMetrics,\n                nvOptimizations: null\n            };\n        }\n        // Calculate realistic GPU metrics\n        const gpuMetrics = {\n            fps: Math.min(1000, cpuMetrics.fps * modelCharacteristics.speedupFactor * modelCharacteristics.batchSize),\n            latency: Math.max(0.1, cpuMetrics.latency / modelCharacteristics.speedupFactor),\n            memory: cpuMetrics.memory * modelCharacteristics.memoryEfficiency,\n            utilization: Math.min(95, modelCharacteristics.baseUtilization * (totalFlops / 1e12))\n        };\n        // Calculate memory bandwidth based on utilization and model type\n        const memoryBandwidth = gpuMetrics.utilization / 100 * (this.GPU_SPECS.memoryBandwidth * modelCharacteristics.memoryEfficiency);\n        const nvOptimizations = {\n            tensorCoreUsage: \"\".concat(modelCharacteristics.tensorCoreUsage.toFixed(1), \"%\"),\n            memoryBandwidth: \"\".concat((memoryBandwidth / 1000).toFixed(1), \" TB/s\"),\n            speedup: \"\".concat(modelCharacteristics.speedupFactor.toFixed(1), \"x\"),\n            batchSize: modelCharacteristics.batchSize,\n            features: modelCharacteristics.features\n        };\n        return {\n            cpuMetrics,\n            gpuMetrics,\n            nvOptimizations\n        };\n    }\n    getDefaultMetrics() {\n        const defaultMetrics = {\n            fps: 0,\n            latency: 0,\n            memory: 0,\n            utilization: 0\n        };\n        return {\n            cpuMetrics: defaultMetrics,\n            gpuMetrics: defaultMetrics,\n            nvOptimizations: null\n        };\n    }\n    constructor(){\n        this.GPU_SPECS = {\n            peakTflops: 312,\n            memoryBandwidth: 2048,\n            tensorCores: 432,\n            maxBatchSize: 32,\n            // Add realistic baseline metrics\n            baselineUtilization: {\n                cnn: 25,\n                transformer: 45,\n                detection: 35,\n                generation: 65 // Stable Diffusion etc\n            }\n        };\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/model/performance.ts\n"));

/***/ })

});